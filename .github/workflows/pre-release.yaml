# .github/workflows/pre-release.yaml
# Handles pre-release tag pushes (dev/alpha tags) and publishes
# built distributions to TestPyPI. Intended for tags like v1.2.3dev1 or v1.2.3a1.

name: pre-release

on:
  push:
    tags:
      # Match tags with prerelease suffixes (devN or aN, at least one digit)
      - 'v[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*dev[0-9][0-9]*'
      - 'v[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*a[0-9][0-9]*'

env:
  PACKAGE_NAME: bellatrex
  OWNER: klestdedja

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.pre-release.outputs.new_version }}
      suffix: ${{ steps.pre-release.outputs.suffix }}
      tag_name: ${{ steps.pre-release.outputs.tag_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: pre-release
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG="${GITHUB_REF_NAME}"  # e.g. v0.3.1dev1
            # Strict prerelease format: vX.Y.Z(devN|aN)
            if [[ "$TAG" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)([a-z]+[0-9]+)$ ]]; then
              CORE="${BASH_REMATCH[1]}"    # 0.3.1
              SUFFIX="${BASH_REMATCH[2]}"  # dev1 or a1
            else
              echo "Tag '$TAG' is not a valid prerelease like vX.Y.ZdevN or vX.Y.ZaN."
              exit 1
            fi

            NEW_VERSION="${CORE}${SUFFIX}"  # e.g. 0.3.1dev1

            {
              printf "new_version=%s\n" "$NEW_VERSION"
              printf "suffix=%s\n" "$SUFFIX"
              printf "tag_name=%s\n" "$TAG"
            } >> "$GITHUB_OUTPUT"

            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from TestPyPI
        shell: bash
        run: |
          set -euo pipefail
          response=$(curl -sf https://test.pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo '{}')

          # Safely list all release keys (handles empty/missing .releases)
          latest_previous_version=$(
            echo "$response" \
            | jq -r '(.releases // {}) | keys[]?' \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+([a-z]+[0-9]+)?$' \
            | sort -V \
            | tail -n1
          )

          if [ -z "${latest_previous_version:-}" ]; then
            echo "No releases found on TestPyPI."
            latest_previous_version="0.0.0"
          fi

          echo "Latest TestPyPI version: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> "$GITHUB_ENV"

      - name: Compare versions and exit if not newer
        shell: bash
        run: |
          set -euo pipefail
          NEW_VERSION="${{ needs.details.outputs.new_version }}"  # e.g. 0.3.1dev1
          LATEST_VERSION="$latest_previous_version"
          top=$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -V | tail -n1)
          if [ "$top" != "$NEW_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than $LATEST_VERSION on TestPyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than $LATEST_VERSION on TestPyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Python and build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Install package and build distributions
        run: |
          # Install project (and dev extras if present) so build dependencies are available
          pip install -e ".[dev]" || true
          # Build sdist and wheel into ./dist
          python -m build --sdist --wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload pre-release to TestPyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: pre-release
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          # user: __token__
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  github_release:
    name: Create GitHub Release (pre-release)
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Create GitHub Release (pre-release)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* \
            --title "${{ needs.details.outputs.tag_name }}" \
            --prerelease
