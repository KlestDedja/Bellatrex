# This workflow handles pre-release tag pushes (dev/alpha tags) and publishes
# built distributions to TestPyPI. It is intended for tags like v1.2.3dev1 or v1.2.3a1.
name: pre-release

on:
  push:
    tags:
      - 'v*.*.*a*'      # alpha
      - 'v*.*.*dev*'    # development version
  workflow_dispatch:
env:
  PACKAGE_NAME: bellatrex
  OWNER: klestdedja

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.pre-release.outputs.new_version }}
      suffix: ${{ steps.pre-release.outputs.suffix }}
      tag_name: ${{ steps.pre-release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: pre-release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          # For pre-release workflow we check TestPyPI for existing pre-release versions
          response=$(curl -s https://test.pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.pre-releases != null) | .pre-releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on TestPyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on TestPyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Python and build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Install package and build distributions
        run: |
          # Install project (and dev extras if present) so build dependencies are available
          pip install -e ".[dev]" || true
          # Build sdist and wheel into ./dist
          python -m build --sdist --wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload pre-release to TestPyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: pre-release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        #   repository-url: https://test.pypi.org/legacy/
        #   user: __token__
        #   password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release (pre-release)
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create a GitHub pre-release and auto-generate release notes
          gh release create ${{ needs.details.outputs.tag_name }} dist/* \
            --title "${{ needs.details.outputs.tag_name }}" \
            --prerelease
        # --generate-notes not now yet